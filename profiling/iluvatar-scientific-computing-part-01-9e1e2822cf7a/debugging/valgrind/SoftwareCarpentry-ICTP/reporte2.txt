--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         4194304 B, 64 B, 16-way associative
Command:          ./a.out 0 4200 4200
Data file:        cachegrind.out.4132
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   I1mr           ILmr           Dr                   D1mr            DLmr           Dw                  D1mw                DLmw               
--------------------------------------------------------------------------------
266,742,702 (100.0%) 1,286 (100.0%) 1,266 (100.0%) 141,640,851 (100.0%) 12,505 (100.0%) 7,429 (100.0%) 17,819,661 (100.0%) 17,642,314 (100.0%) 2,210,676 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                   D1mr           DLmr           Dw                  D1mw                DLmw                file:function
--------------------------------------------------------------------------------
264,637,851 (99.21%)  5 ( 0.39%)  5 ( 0.39%) 141,141,016 (99.65%)     1 ( 0.01%)     1 ( 0.01%) 17,644,213 (99.02%) 17,639,999 (99.99%) 2,209,199 (99.93%)  /home/live/repos/2021-I-Herrcompj/profiling/iluvatar-scientific-computing-part-01-9e1e2822cf7a/debugging/valgrind/SoftwareCarpentry-ICTP/cacheTest.cc:main
    913,302 ( 0.34%) 11 ( 0.86%) 11 ( 0.87%)     151,500 ( 0.11%) 1,853 (14.82%) 1,581 (21.28%)     44,269 ( 0.25%)         16 ( 0.00%)         5 ( 0.00%)  ???:_dl_lookup_symbol_x
    551,677 ( 0.21%) 33 ( 2.57%) 33 ( 2.61%)     180,391 ( 0.13%) 3,675 (29.39%)   820 (11.04%)     83,300 ( 0.47%)         59 ( 0.00%)        42 ( 0.00%)  ???:do_lookup_x
    363,208 ( 0.14%) 54 ( 4.20%) 54 ( 4.27%)      91,131 ( 0.06%) 5,675 (45.38%) 4,180 (56.27%)     27,243 ( 0.15%)      1,673 ( 0.01%)       908 ( 0.04%)  ???:_dl_relocate_object

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/live/repos/2021-I-Herrcompj/profiling/iluvatar-scientific-computing-part-01-9e1e2822cf7a/debugging/valgrind/SoftwareCarpentry-ICTP/cacheTest.cc
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                  D1mr       DLmr       Dw                  D1mw                DLmw               

          .          .          .                   .          .          .                   .                   .                  .           #include <stdio.h>
          .          .          .                   .          .          .                   .                   .                  .           #include <stdlib.h>
          .          .          .                   .          .          .                   .                   .                  .           
          .          .          .                   .          .          .                   .                   .                  .           /**
          .          .          .                   .          .          .                   .                   .                  .           Tests cache misses.
          .          .          .                   .          .          .                   .                   .                  .           */
          .          .          .                   .          .          .                   .                   .                  .           
          .          .          .                   .          .          .                   .                   .                  .           int main(int argc, char **argv)
          5 ( 0.00%) 0          0                   0          0          0                   3 ( 0.00%)          0                  0           {
          2 ( 0.00%) 0          0                   1 ( 0.00%) 0          0                   0                   0                  0             if (argc < 4){
          .          .          .                   .          .          .                   .                   .                  .               printf("Usage: cacheTest fast sizeI sizeJ\nIn first input, use 1 for fast code (cache-smart) and anything else for slow (cache-poor) execution.\n");
          .          .          .                   .          .          .                   .                   .                  .               return 1;
          .          .          .                   .          .          .                   .                   .                  .             }
          6 ( 0.00%) 1 ( 0.08%) 1 ( 0.08%)          2 ( 0.00%) 0          0                   2 ( 0.00%)          0                  0             int runFast = atoi(argv[1]);
          7 ( 0.00%) 0          0                   2 ( 0.00%) 0          0                   2 ( 0.00%)          0                  0             long sI = atoi(argv[2]);
          7 ( 0.00%) 1 ( 0.08%) 1 ( 0.08%)          2 ( 0.00%) 0          0                   2 ( 0.00%)          0                  0             long sJ = atoi(argv[3]);
          .          .          .                   .          .          .                   .                   .                  .           
          6 ( 0.00%) 0          0                   2 ( 0.00%) 0          0                   1 ( 0.00%)          0                  0             printf("Operating on matrix of size %d by %d\n",sI,sJ);
          .          .          .                   .          .          .                   .                   .                  .           
          9 ( 0.00%) 1 ( 0.08%) 1 ( 0.08%)          2 ( 0.00%) 0          0                   2 ( 0.00%)          0                  0             long *arr = new long[sI*sJ]; // double array.
          .          .          .                   .          .          .                   .                   .                  .           
          .          .          .                   .          .          .                   .                   .                  .             // El mejor!
          .          .          .                   .          .          .                   .                   .                  .             //for (int i=0; i < sI*sJ; ++i) arr[i] = i;
          .          .          .                   .          .          .                   .                   .                  .           
          2 ( 0.00%) 0          0                   1 ( 0.00%) 0          0                   0                   0                  0             if (runFast == 1){
          .          .          .                   .          .          .                   .                   .                  .           
          .          .          .                   .          .          .                   .                   .                  .               for (long i=0; i < sI; ++i)
          .          .          .                   .          .          .                   .                   .                  .                 for (long j=0; j < sJ; ++j)
          .          .          .                   .          .          .                   .                   .                  .           	arr[(i * (sJ)) + j ] = i;
          .          .          .                   .          .          .                   .                   .                  .           
          .          .          .                   .          .          .                   .                   .                  .             }else{
          .          .          .                   .          .          .                   .                   .                  .           
     21,004 ( 0.01%) 2 ( 0.16%) 2 ( 0.16%)     12,602 ( 0.01%) 0          0                   1 ( 0.00%)          0                  0               for (long i=0; i < sI; ++i)
 88,216,800 (33.07%) 0          0          52,928,400 (37.37%) 0          0               4,200 ( 0.02%)          0                  0                 for (long j=0; j < sJ; ++j)
176,400,000 (66.13%) 0          0          88,200,000 (62.27%) 0          0          17,640,000 (98.99%) 17,639,999 (99.99%) 2,209,199 (99.93%)  	arr[(j * (sI)) + i ] = i;
          .          .          .                   .          .          .                   .                   .                  .           
          .          .          .                   .          .          .                   .                   .                  .             }
          .          .          .                   .          .          .                   .                   .                  .           
          1 ( 0.00%) 0          0                   0          0          0                   0                   0                  0             return 1;
          2 ( 0.00%) 0          0                   2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)          0                   0                  0           }

--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                   D1mr       DLmr       Dw                  D1mw                DLmw               
--------------------------------------------------------------------------------
264,637,851 (99.21%) 5 ( 0.39%) 5 ( 0.39%) 141,141,016 (99.65%) 1 ( 0.01%) 1 ( 0.01%) 17,644,213 (99.02%) 17,639,999 (99.99%) 2,209,199 (99.93%)  events annotated

